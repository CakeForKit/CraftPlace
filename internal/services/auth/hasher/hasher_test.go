package hasher_test

import (
	"testing"

	"github.com/CakeForKit/CraftPlace.git/internal/services/auth/hasher"
	"github.com/ozontech/allure-go/pkg/framework/provider"
	"github.com/ozontech/allure-go/pkg/framework/suite"
	"github.com/stretchr/testify/require"
)

type HasherSuite struct {
	suite.Suite
	hasherServ hasher.Hasher
}

func TestHasher(t *testing.T) {
	suite.RunSuite(t, new(HasherSuite))
}

func (s *HasherSuite) BeforeEach(t provider.T) {
	t.Epic("Password")
	t.Feature("Hasher Service")

	hasherServ, err := hasher.NewHasher()
	require.NoError(t, err)
	s.hasherServ = hasherServ
}

func (s *HasherSuite) TestHasher_HashAndCheckPassword(t provider.T) {
	t.WithNewStep("–£—Å–ø–µ—à–Ω–æ–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è", func(sCtx provider.StepCtx) {
		// Arrange
		password := "1234were### _"

		// Act
		hashedPassword, err := s.hasherServ.HashPassword(password)

		// Assert
		sCtx.Require().NoError(err)
		sCtx.Require().NotEmpty(hashedPassword)

		// Verify
		err = s.hasherServ.CheckPassword(password, hashedPassword)
		sCtx.Require().NoError(err)
	})
}

func (s *HasherSuite) TestHasher_WrongPassword(t provider.T) {
	t.WithNewStep("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è", func(sCtx provider.StepCtx) {
		// Arrange
		password := "1234were### _"
		wrongPassword := "0"

		hashedPassword, err := s.hasherServ.HashPassword(password)
		sCtx.Require().NoError(err)
		sCtx.Require().NotEmpty(hashedPassword)

		// Act
		err = s.hasherServ.CheckPassword(wrongPassword, hashedPassword)

		// Assert
		sCtx.Require().Error(err)
		sCtx.Require().ErrorIs(err, hasher.ErrPassword)
	})
}

func (s *HasherSuite) TestHasher_EmptyPassword(t provider.T) {
	t.WithNewStep("–•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –ø–∞—Ä–æ–ª—è", func(sCtx provider.StepCtx) {
		// Arrange
		password := ""

		// Act
		hashedPassword, err := s.hasherServ.HashPassword(password)

		// Assert
		sCtx.Require().Error(err)
		sCtx.Require().ErrorIs(err, hasher.ErrEmptyPassword)
		sCtx.Require().Empty(hashedPassword)
	})
}

func (s *HasherSuite) TestHasher_DifferentHashesForSamePassword(t provider.T) {
	t.WithNewStep("–†–∞–∑–Ω—ã–µ —Ö—ç—à–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è", func(sCtx provider.StepCtx) {
		// Arrange
		password := "1234"

		// Act
		hashedPassword1, err := s.hasherServ.HashPassword(password)
		sCtx.Require().NoError(err)
		sCtx.Require().NotEmpty(hashedPassword1)

		hashedPassword2, err := s.hasherServ.HashPassword(password)
		sCtx.Require().NoError(err)
		sCtx.Require().NotEmpty(hashedPassword2)

		// Assert
		sCtx.Assert().NotEqual(hashedPassword1, hashedPassword2,
			"–•—ç—à–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ –∏–∑-–∑–∞ —Å–æ–ª–∏")
	})
}

func (s *HasherSuite) TestHasher_ValidHashFormat(t provider.T) {
	t.WithNewStep("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ö—ç—à–∞", func(sCtx provider.StepCtx) {
		// Arrange
		password := "secure_password_123"

		// Act
		hashedPassword, err := s.hasherServ.HashPassword(password)
		sCtx.Require().NoError(err)

		// Assert
		sCtx.Require().NotEmpty(hashedPassword)
		sCtx.Assert().Greater(len(hashedPassword), 10,
			"–•—ç—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º")
	})
}

func (s *HasherSuite) TestHasher_MultiplePasswordChecks(t provider.T) {
	t.WithNewStep("–ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è", func(sCtx provider.StepCtx) {
		// Arrange
		password := "test_password"
		hashedPassword, err := s.hasherServ.HashPassword(password)
		sCtx.Require().NoError(err)

		// Act & Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
		for i := 0; i < 3; i++ {
			err = s.hasherServ.CheckPassword(password, hashedPassword)
			sCtx.Require().NoError(err, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑")
		}
	})
}

func (s *HasherSuite) TestHasher_SpecialCharactersPassword(t provider.T) {
	t.WithNewStep("–ü–∞—Ä–æ–ª—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏", func(sCtx provider.StepCtx) {
		// Arrange
		passwords := []string{
			"p@ssw0rd!",
			"–ø–∞—Ä–æ–ª—å123",
			"üîêsecure123",
			"very_long_password_with_many_characters_1234567890!@#$%^&*()",
		}

		for _, password := range passwords {
			sCtx.WithNewStep("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: "+password, func(stepCtx provider.StepCtx) {
				// Act
				hashedPassword, err := s.hasherServ.HashPassword(password)
				stepCtx.Require().NoError(err)
				stepCtx.Require().NotEmpty(hashedPassword)

				// Verify
				err = s.hasherServ.CheckPassword(password, hashedPassword)
				stepCtx.Require().NoError(err)
			})
		}
	})
}
